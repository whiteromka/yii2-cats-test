REST API - Средство общения программ через http(s) протокол.

    // Методы запроса:
    // POST .../user/create {...} // создать пользователя
    // GET .../user/12 // получить данные о поль-е
    // POST .../user/delete/12 // удаление
    // POST .../user/update/12 {...} // обновление

    // GET — получение информации об объекте (ресурсе).
    // POST — создание нового объекта (ресурса).
    // PUT — полная замена объекта (ресурса) на обновленную версию.
    // PATCH — частичное изменение объекта (ресурса).
    // DELETE — удаление информации об объекте (ресурсе).

    // HEAD - Запрашивает заголовки ответа без тела. Получение метаданных о ресурсе, например,
    // статуса или длины содержимого, без загрузки данных.
    // OPTIONS - Получение доступных методов

    // Коды ответов:
    // Статус код - это признак успешности выполнения запроса
    //      200 20X 2XX // хорошо
    //      400 4XX // плохой запрос. Т.е. ошибка на стороне которая отправила запрос
    //      500 ... // сервер сломался. Т.е. ошибка на стороне которая принимает запрос
    //      100 // информационные - редко встречаются
    //      300 // редирект. Смысл в том что нужно выполнить повторный запрос на другому url

Для взаимодействия программ(сайт - это тоже программа исполняемая на сервере) по АПИ нужно
хотя бы 2-е. Одна "отдаватель" инфомации, другая "спрашиватель".

Спрашиватель через Curl или другую подобную подпрограмму посылает запрос:
"дай мне котов" (GET ../cat/all) или
"добавь нового кота с именем ... и ценой ..." (POST ../cat/create {name: Myrz, price: 100} )  или
"удали по ID = ..." (DELETE ../cat/delete {id: 11} ).
В случае каких то действий типо создания или удаления Спрашиватель должен еще передать секретный ключ, обычно в заголовках.

Отдаватель должен вернуть один из статус кодов. И тело ответа если оно предусмотрено.
Для запроса "дай мне котов" отдаст 200 и набор котов.
Для запроса "добавь нового кота с именем ... и ценой ..." отдаст 200, и можно отдать пустое тело ответа.
Для удаления тоже самое.
